---
import type * as types from "@/lib/types";
import { sendDNSRequest } from "@/scripts/utils";
import api from "@/lib/api"

import Layout from "../layouts/Primary.astro";
import Modal from "../layouts/Modal.astro";
import Dropdown from "../components/Dropdown.astro";

import Domain from "../components/Domain.astro";
import PagedController from "../components/PagedController.astro";
import TargetInput from "../components/TargetInput.astro";
import DomainKey from "../components/DomainKey.astro";

const userId = Astro.locals.auth().sessionClaims!.userId as string;
if (!userId) Astro.redirect("https://accounts.webxplus.org/login");

const domains = await api.getDomains({owned: true}, userId).catch(e => console.log(e));
const tlds = await api.getTLDs().catch(e => console.log(e));
if (!domains) throw new Error("Failed to load domains");
if (!tlds) throw new Error("Failed to load TLDs");

const user = await Astro.locals.currentUser();
if (!user) return Astro.redirect("https://accounts.webxplus.org/login");

const user_tlds = user.privateMetadata.reserved_tlds ?? [];
const availabe_tlds = tlds.available.filter(x => (tlds.info[x] ? !tlds.info[x].reserved : true) || user_tlds.includes(x));

const sort_method = Astro.cookies.get("domain_sort")?.value ?? "updated";
const sorted_domains = domains.sort((a, b) => {
    if (sort_method === "name") return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
    if (sort_method === "created") return parseInt(b.created_at) - parseInt(a.created_at);
    if (sort_method === "updated") return parseInt(b.updated_at) - parseInt(a.updated_at);
    return 0;
});

const target_regex = "^(https?\:\/\/)?((([0-9]{1,3}\.?){4})|((([a-zA-Z0-9]([a-zA-Z0-9-]{1,61})?[a-zA-Z0-9])\.)+[a-zA-Z]{2,63}))(:[0-9]{1,5})?(\/[a-zA-Z0-9-_%\+]+)*\/?$";

let registered_domain = {} as {name: string, key: string};
if (Astro.cookies.has("register_domain")) {
    try {
        registered_domain = JSON.parse(Astro.cookies.get("register_domain")?.value!);
        Astro.cookies.delete("register_domain");
    } catch(e) {};
};

---

<Layout title="My Domains">
    {registered_domain && registered_domain.name ? <DomainKey name={registered_domain.name} key={registered_domain.key} /> : ""}
    <div class="flex v-center" id="domainContainer">
        <h2 class="h2">My Domains</h2>
        <button class="domain-create | push-right nostyles pointer" onclick="openModal('domainRegisterModal')">Register a new domain</button>
    </div>
    <div class="flex v-center gap-200">
        <input type="text" id="domainSearch" class="input" placeholder="Search domains" />
        <div class="push-right">
            <Dropdown id="domainSort" label="Sort">
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortName" value="name" checked={sort_method === "name"} />
                    <label for="domainSortName">Name</label>
                </label>
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortCreated" value="created" checked={sort_method === "created"} />
                    <label for="domainSortCreated">Registered</label>
                </label>
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortUpdated" value="updated" checked={sort_method === "updated"} />
                    <label for="domainSortUpdated">Last Updated</label>
                </label>
            </Dropdown>
        </div>
    </div>
    <div id="domainList">
        {sorted_domains.map((x, i) => <Domain {...x} on_first_page={i < 15} />)}
    </div>
    <PagedController rows_per_page={15} total_rows={domains.length} />
</Layout>

<Modal id="domainRegisterModal" title="Register a new domain">
    <form id="domainRegisterForm">
        <div class="form-group">
            <label for="domainRegisterName" class="label">Domain name</label>
            <div class="input gap-200">
                <input type="text" id="domainRegisterName" class="nostyles f1" maxlength="24" minlength="1" pattern="[a-z0-9-]{1,24}" data-domain-input="domain">
                <div class="push-right flex v-center">
                    <p class="input-addon">.</p>
                    <select id="domainRegisterTld" class="nostyles">
                        {availabe_tlds.sort((z, y) => z.localeCompare(y)).map((y:any) => <option value={y} selected={y === "webx"}>{y}</option>)}
                    </select>
                </div>
            </div>
            <p class="input-note">1 - 24 characters, alphanumeric and hyphens only, case insensitive</p>
        </div>
        <div class="form-group">
            <label for="domainRegisterTarget" class="label">Target</label>
            <TargetInput id="domainRegisterTarget" />
        </div>
        <div class="form-group">
            <div class="flex v-center gap-100">
                <label for="domainRegisterNote" class="label">Note</label>
                <p class="input-note push-right">(optional)</p>
            </div>
            <input type="text" id="domainRegisterNote" class="input">
        </div>
        <div class="form-group">
            <div class="flex v-center gap-100">
                <label class="toggle">
                    <input type="checkbox" id="domainRegisterSearchable" checked />
                    <span aria-hidden="true"></span>
                </label>
                <label for="domainRegisterSearchable" class="toggle-label">Searchable</label>
            </div>
            <p class="input-note">Disable to hide your website from searches and bulk domain listing. Your domain will still be accessible via the the URL</p>
        </div>

        <div class="cf-turnstile" data-sitekey="0x4AAAAAAAbvf74ep4tJrq3W"></div>

        <div class="flex v-center gap-200">
            <button type="submit" class="button">Register Domain</button>
            <p class="form-result" id="domainRegisterError"></p>
        </div>
    </form>
</Modal>
<Modal id="recordCreateModal" title="New Record">
    <form id="recordCreateForm">
        <div class="form-group">
            <label for="recordCreateType" class="label">Type</label>
            <select class="input" id="recordCreateType">
                <option value="WEB" selected>WEB</option>
                <option value="TXT">TXT</option>
                <option value="RED">RED</option>
            </select>
        </div>
        <div class="form-group">
            <label for="recordCreateName" class="label">Name</label>
            <div class="input | flex v-center">
                <input type="text" id="recordCreateName" class="nostyles f1" maxlength="24" minlength="1" pattern="(@|[a-z0-9-.]{1,24})" data-domain-input="subdomain">
                <p class="input-addon push-right" id="recordCreateDomain"></p>
            </div>
            <p class="input-note">1 - 24 characters, alphanumeric and hyphens & dots (.) only, case insensitive</p>
            <p class="input-note">Use @ for root</p>
        </div>
        <div class="form-group">
            <label for="recordCreateValue" class="label">Value</label>
            <input type="text" id="recordCreateValue" class="input" style="display: none;">
            <TargetInput id="recordCreateTarget" />
        </div>
        <br />
        <div class="flex v-center gap-200">
            <button type="submit" class="button">Create Record</button>
            <p class="form-result" id="recordCreateError"></p>
        </div>
    </form>
</Modal>

<Modal id="targetDetailsModal" title="Target Details">
    <p>You may use any IPv4 address or most domain names</p>
    <p>You may include a port number and/or path. If you provide a path, it will be considered the root of the domain</p>
    <br />
    <p>Protocol is optional and will be assumed HTTP for IP addresses and HTTPS for domains. Protocol must br either HTTP or HTTPS if provided.</p>
    <br />
    <p>We do not support URLs to raw github content. To use a github repo, you must first publish your site to GitHub Pages and then use that URL as the target. <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-a-github-pages-site" target="_blank">Learn more about publishing to GitHub Pages</a></p>
    <br />
    <p>If you think you have found a mistake with our validation please <a href="https://discord.gg/b5CYjbfHRK">join our Discord</a> and let us know.</p>
</Modal>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" crossorigin="anonymous" async defer></script>

<script>
    import { actions } from "astro:actions";

    import type * as types from "@/lib/types";

    declare global {
        interface Window {
            turnstile: any;
        }
    }

    let captcha_result_token:string|null;
    async function captchaVerify(token:string) {
        const { data, error } = await actions.captcha.verify({ token });
        if (!error) {
            captcha_result_token = data.result_token;
            document.querySelector(".cf-turnstile")!.classList.remove("input-error");
        } else {
            captchaReset();
        };
    };
    function captchaReset() {
        captcha_result_token = null;
        window.turnstile.render(".cf-turnstile");
        document.querySelector(".cf-turnstile")!.classList.add("input-error");
    };

    const container = document.querySelector("#domainList") as HTMLDivElement;
    let domains = document.querySelectorAll("[data-domain-id]") as NodeListOf<HTMLDivElement>;

    const registerButton = document.querySelector(".domain-create") as HTMLButtonElement;
    registerButton.addEventListener("click", async() => {
        window.turnstile.render(".cf-turnstile", {
            sitekey: "0x4AAAAAAAbvf74ep4tJrq3W",
            callback: captchaVerify
        });
    });

    const domainInput = document.querySelectorAll("[data-domain-input]") as NodeListOf<HTMLInputElement>;
    for (let x of domainInput) {
        x.addEventListener("input", async() => {
            const regex = new RegExp(`[^a-z0-9@-${x.dataset.domainInput === "subdomain" ? "." : ""}]`, "g");
            x.value = x.value.toLowerCase().replaceAll(' ', '-').replace(regex, '');
        });
    };

    const registerForm = document.querySelector("#domainRegisterForm") as HTMLFormElement;
    registerForm.addEventListener("submit", async e => {
        e.preventDefault();
        const button = registerForm.querySelector("button[type='submit']") as HTMLButtonElement;
        if (button.dataset.actionState === "loading") return;
        button.dataset.actionState = "loading";
        const result = registerForm.querySelector(".form-result") as HTMLParagraphElement;
        result.innerText = "";
        try {
            const name = document.querySelector("#domainRegisterName") as HTMLInputElement;
            const tld = document.querySelector("#domainRegisterTld") as HTMLSelectElement;
            const target = document.querySelector("#domainRegisterTarget") as HTMLInputElement;
            let invalid = false;
            if (!name.validity.valid) {
                invalid = true;
                name.classList.add("input-error");
            };
            if (!tld.validity.valid) {
                invalid = true;
                tld.classList.add("input-error");
            };
            if (!target.validity.valid) {
                invalid = true;
                target.classList.add("input-error");
            };
            if (!captcha_result_token) {
                if (window.turnstile.getResponse()) {
                    await captchaVerify(window.turnstile.getResponse())
                } else {
                    invalid = true;
                    document.querySelector(".cf-turnstile")!.classList.add("input-error");
                };
            };
            if (!invalid) {
                const { data, error } = await actions.domains.create({
                    name: name.value,
                    tld: tld.value,
                    target: target.value,
                    note: (document.querySelector("#domainRegisterNote") as HTMLInputElement).value,
                    searchable: (document.querySelector("#domainRegisterSearchable") as HTMLInputElement).checked,
                    captcha_token: captcha_result_token!,
                });
                if (!error) {
                    sessionStorage.setItem("domain_selected_reload", data._id);
                    location.reload();
                } else if (error.status === 400) {
                    result.innerText = "Invalid domain name or TLD";
                } else if (error.status === 409) {
                    result.innerText = "Domain already exists";
                    name.classList.add("input-error");
                } else {
                    result.innerText = `Failed to add record (${error.status})\n${error.message ?? ""}`;
                    console.log(error);
                };
                if (error) window.turnstile.reset();
            };
        } catch (e:any) {
            console.error(e);
            result.innerText = `Failed to register domain\n${e.message}`;
        };
        button.dataset.actionState = "save";
    });

    const recordCreateForm = document.querySelector("#recordCreateForm") as HTMLFormElement;
    recordCreateForm.addEventListener("submit", async e => {
        e.preventDefault();
        const button = recordCreateForm.querySelector("button[type='submit']") as HTMLButtonElement;
        if (button.dataset.actionState === "loading") return;
        button.dataset.actionState = "loading";
        const result = recordCreateForm.querySelector(".form-result") as HTMLParagraphElement;
        result.innerText = "";
        try {
            let record_create_domain:string = (document.querySelector("#recordCreateModal") as HTMLDialogElement).dataset.createRecordId!
            const type = document.querySelector("#recordCreateType") as HTMLSelectElement;
            const name = document.querySelector("#recordCreateName") as HTMLInputElement;
            const value = document.querySelector("#recordCreateValue") as HTMLInputElement;
            const target = document.querySelector("#recordCreateTarget") as HTMLInputElement;
            let invalid = false;
            if (!type.validity.valid) {
                invalid = true;
                type.classList.add("input-error");
            };
            if (!name.validity.valid) {
                invalid = true;
                name.classList.add("input-error");
            };
            let value_text = "";
            if (type.value === "WEB") {
                if (!target.validity.valid) {
                    invalid = true;
                    target.classList.add("input-error");
                };
                value_text = target.value;
            } else {
                if (!value.validity.valid) {
                    invalid = true;
                    value.classList.add("input-error");
                };
                value_text = value.value;
            }
            if (!record_create_domain) {
                invalid = true;
                result.innerText = "No domain selected. Please reload and try again";
            }
            if (!invalid) {
                const { data, error } = await actions.records.create({
                    domainId: record_create_domain,
                    type: type.value as types.RecordType,
                    name: name.value,
                    value: value_text,
                });
                if (!error) {
                    result.innerText = "Record registered";
                    result.style.color = "var(--wxp-clr-success-400)";
                    sessionStorage.setItem("domain_selected_reload", record_create_domain);
                    location.reload();
                } else if (error.status === 400) {
                    result.innerText = "Missing or invalid parameters";
                    name.classList.add("input-error");
                    value.classList.add("input-error");
                } else if (error.status === 401) {
                    document.location = "/login";
                } else if (error.status === 404) {
                    location.reload();
                } else if (error.status === 409) {
                    result.innerText = "Record already exists";
                    name.classList.add("input-error");
                } else {
                    result.innerText = `Failed to add record (${error.status})\n${error.message ?? ""}`;
                    console.log(error);
                };
            };
        } catch (e:any) {
            console.error(e);
            result.innerText = `Failed to add record\n${e.message}`;
        };
        button.dataset.actionState = "save";
    });

    document.querySelector("#domainSearch")?.addEventListener("input", filterDomains);
    (document.querySelectorAll("[name='domainSort']") as NodeListOf<HTMLInputElement>).forEach(x => x.addEventListener("change", () => {
        sortDomains(x.value);
    }));

    const recordCreateType = document.querySelector("#recordCreateType") as HTMLSelectElement;
    recordCreateType.addEventListener("change", () => {
        const value2 = recordCreateType.value as types.RecordType;
        const target = document.querySelector("[data-target-input='recordCreateTarget']") as HTMLDivElement;
        const value = document.querySelector("#recordCreateValue") as HTMLInputElement;
        if (value2 === "WEB") {
            target.style.display = "";
            value.style.display = "none";
        } else {
            target.style.display = "none";
            value.style.display = "";
        };
    });

    function sortDomains(order: string) {
        console.log("Sorting");
        let switchMade = true;
        while (switchMade) {
            switchMade = false;
            domains = document.querySelectorAll("[data-domain-id]") as NodeListOf<HTMLDivElement>;
            for (let i = 0; i < (domains.length - 1); i++) {
                console.log("a");
                const a = domains[i], b = domains[i + 1];
                if (
                    (order === "name" && b.dataset.domainName!.toLowerCase() < a.dataset.domainName!.toLowerCase()) ||
                    /* @ts-ignore */
                    (order === "created" && new Date(b.dataset.domainCreated!).getTime() > new Date(a.dataset.domainCreated!).getTime()) ||
                    /* @ts-ignore */
                    (order === "updated" && new Date(b.dataset.domainUpated!).getTime() > new Date(a.dataset.domainUpated!).getTime())
                ) {
                    container.insertBefore(b, a);
                    console.log("Swap made");
                    switchMade = true;
                    break;
                };
            };
        };
        document.cookie = `domain_sort=${order}; path=/; expires=${new Date(Date.now() + 1000 * 60 * 60 * 24 * 365).toUTCString()};`;
        const event = new CustomEvent("render_page");
        document.querySelector(".paged-controller")?.dispatchEvent(event);
    };
    function filterDomains() {
        const search_input = document.querySelector("#domainSearch") as HTMLInputElement;
        const search_term = search_input.value;
        domains.forEach(x => {
            let shouldShow = true;
            const domain_name = x.dataset.domainName!;
            if (search_term != "" && domain_name.toLowerCase().indexOf(search_term.toLowerCase()) == -1) shouldShow = false;
            x.style.display = shouldShow ? "" : "none";
            x.dataset.rowFiltered = shouldShow ? "" : "true";
        });
        const event = new CustomEvent("render_page", {
            detail: {
                page: 1
            }
        });
        document.querySelector(".paged-controller")?.dispatchEvent(event);
    };
</script>

<style>
    .domain-create {
        font-weight: 800;
        color: var(--wxp-clr-primary-600);
    }

    #domainRegisterTld {
        min-width: 150px;
    }

    #domainSearch {
        max-width: 500px;
    }

</style>