---
import type * as types from "../../types.ts";
import { sendDNSRequest } from "../scripts/utils.ts";

import Layout from "../layouts/Primary.astro";
import Modal from "../layouts/Modal.astro";
import Dropdown from "../components/Dropdown.astro";

import Domain from "../components/Domain.astro";
import PagedController from "../components/PagedController.astro";

const userId = Astro.locals.auth().sessionClaims.userId;
if (!userId) Astro.redirect("https://accounts.webxplus.org/login");

type TLDResponse = {
    status: number;
    data: {
        valid_tlds: types.TLD;
        can_register: types.TLD;
    }
}
type DomainResponse = {
    status: number;
    data: types.Domain[];
}

const domain_request = await sendDNSRequest("domains?owned=true", "GET", userId) as DomainResponse;
if (domain_request.status != 200) console.log("Error loading Domains");
const domains = domain_request.status == 200 ? domain_request.data : [];

const tld_request = await sendDNSRequest("tlds", "GET", userId) as TLDResponse;
if (tld_request.status != 200) console.log("Error loading TLDs");
let tlds = tld_request.status == 200 ? tld_request.data.can_register : {} as types.TLD;
const user = await Astro.locals.currentUser();
if (tlds.reserved) tlds.reserved = tlds.reserved.filter(x => user?.privateMetadata && user.privateMetadata.reserved_tlds?.includes(x));
const labels = {
    real: "Real",
    webx: "WebX",
    webx_plus: "WebX+",
    reserved: "Reserved",
} as {[T in keyof types.TLD]: string};

const sort_method = Astro.cookies.get("domain_sort")?.value ?? "name";

//sort according to the method
const sorted_domains = domains.sort((a, b) => {
    if (sort_method === "name") return b.name.toLowerCase().localeCompare(a.name.toLowerCase());
    /* @ts-ignore */
    if (sort_method === "created") return parseInt(b.created_at) - parseInt(a.created_at);
    /* @ts-ignore */
    if (sort_method === "updated") return parseInt(b.updated_at) - parseInt(a.updated_at);
    return 0;
});

---

<Layout title="My Domains">
    <div class="flex v-center" id="domainContainer">
        <h2 class="h2">My Domains</h2>
        <button class="domain-create | push-right nostyles pointer" onclick="openModal('domainRegisterModal')">Register a new domain</button>
    </div>
    <div class="flex v-center gap-200">
        <input type="text" id="domainSearch" class="input" placeholder="Search domains" />
        <div class="push-right">
            <Dropdown id="domainSort" label="Sort">
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortName" value="name" checked={sort_method === "name"} />
                    <label for="domainSortName">Name</label>
                </label>
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortCreated" value="created" checked={sort_method === "created"} />
                    <label for="domainSortCreated">Registered</label>
                </label>
                <label class="dropdown-item">
                    <input type="radio" name="domainSort" id="domainSortUpdated" value="updated" checked={sort_method === "updated"} />
                    <label for="domainSortUpdated">Last Updated</label>
                </label>
            </Dropdown>
        </div>
    </div>
    <div id="domainList">
        {sorted_domains.map((x, i) => <Domain {...x} on_first_page={i < 2} />)}
    </div>
    <PagedController rows_per_page={2} total_rows={domains.length} />
</Layout>

<Modal id="domainRegisterModal" title="Register a new domain">
    <form id="domainRegisterForm">
        <div class="form-group">
            <label for="domainRegisterName" class="label">Domain name</label>
            <div class="input gap-200">
                <input type="text" id="domainRegisterName" class="nostyles f1" maxlength="24" minlength="3" pattern="[a-z0-9-]{3,24}" data-domain-input="domain">
                <div class="push-right flex v-center">
                    <p class="input-addon">.</p>
                    <select id="domainRegisterTld" class="nostyles">
                        {(Object.keys(tlds) as unknown as (keyof typeof tlds)[]).map((x) => <optgroup label={labels[x]}>
                            {tlds[x].sort((z, y) => z.localeCompare(y)).map((y:any) => <option value={y} selected={y === "webx"}>{y}</option>)}
                    </optgroup>)}
                    </select>
                </div>
            </div>
            <p class="input-note">3 - 24 characters, alphanumeric and hyphens only, case insensitive</p>
        </div>
        <div class="form-group">
            <label for="domainRegisterTarget" class="label">Target</label>
            <input type="text" id="domainRegisterTarget" class="input">
            <p class="input-note">You can put either an IP address or a public GitHub repo. It should serve a index.html file at the root location</p>
        </div>
        <div class="form-group">
            <div class="flex v-center gap-100">
                <label for="domainRegisterNote" class="label">Note</label>
                <p class="input-note push-right">(optional)</p>
            </div>
            <input type="text" id="domainRegisterNote" class="input">
        </div>
        <div class="form-group">
            <div class="flex v-center gap-100">
                <label class="toggle">
                    <input type="checkbox" id="domainRegisterSearchable" checked />
                    <span aria-hidden="true"></span>
                </label>
                <label for="domainRegisterSearchable" class="toggle-label">Searchable</label>
            </div>
            <p class="input-note">Disable to hide your website from searches and bulk domain listing. Your domain will still be accessible via the the URL</p>
        </div>

        <div class="cf-turnstile" data-sitekey="0x4AAAAAAAbvf74ep4tJrq3W"></div>

        <div class="flex v-center gap-200">
            <button type="submit" class="button">Register Domain</button>
            <p class="form-result" id="domainRegisterError"></p>
        </div>
    </form>
</Modal>
<Modal id="recordCreateModal" title="New Subdomain">
    <form id="recordCreateForm">
        <div class="form-group">
            <label for="recordCreateName" class="label">Subdomain</label>
            <div class="input | flex v-center">
                <input type="text" id="recordCreateName" class="nostyles f1" maxlength="24" minlength="3" pattern="[a-z0-9-.]{3,24}" data-domain-input="subdomain">
                <p class="input-addon push-right" id="recordCreateDomain"></p>
            </div>
            <p class="input-note">3 - 24 characters, alphanumeric and hyphens & dots (.) only, case insensitive</p>
        </div>
        <div class="form-group">
            <label for="recordCreateTarget" class="label">Target</label>
            <input type="text" id="recordCreateTarget" class="input">
            <p class="input-note">You can put either an IP address or a public GitHub repo. It should serve a index.html file at the root location</p>
        </div>
        <div class="form-group">
            <div class="flex v-center gap-100">
                <label class="toggle">
                    <input type="checkbox" id="recordCreateSearchable" checked />
                    <span aria-hidden="true"></span>
                </label>
                <label for="recordCreateSearchable" class="toggle-label">Searchable</label>
            </div>
            <p class="input-note">Disable to hide your website from searches and bulk domain listing. Your domain will still be accessible via the the URL</p>
        </div>
        <br />
        <div class="flex v-center gap-200">
            <button type="submit" class="button">Create Subdomain</button>
            <p class="form-result" id="recordCreateError"></p>
        </div>
    </form>
</Modal>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" crossorigin="anonymous" async defer></script>

<script>
    import type * as types from "../../types.ts";

    declare global {
        interface Window {
            turnstile: any;
        }
    }

    let captcha_result_token:string|null;
    async function captchaVerify(token:string) {
        const request = await fetch("/api/captcha", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({token}),
        });
        if (request.status === 200) {
            let result = await request.json();
            captcha_result_token = result.data.result_token;
            document.querySelector(".cf-turnstile")!.classList.remove("input-error");
        } else {
            captchaReset();
        };
    };
    function captchaReset() {
        captcha_result_token = null;
        window.turnstile.render(".cf-turnstile");
        document.querySelector(".cf-turnstile")!.classList.add("input-error");
    };

    const container = document.querySelector("#domainList") as HTMLDivElement;
    let domains = document.querySelectorAll("[data-domain-id]") as NodeListOf<HTMLDivElement>;

    const registerButton = document.querySelector(".domain-create") as HTMLButtonElement;
    registerButton.addEventListener("click", async() => {
        window.turnstile.render(".cf-turnstile", {
            sitekey: "0x4AAAAAAAbvf74ep4tJrq3W",
            callback: captchaVerify
        });
    });

    const domainInput = document.querySelectorAll("[data-domain-input]") as NodeListOf<HTMLInputElement>;
    for (let x of domainInput) {
        x.addEventListener("input", async() => {
            const regex = new RegExp(`[^a-z0-9-${x.dataset.domainInput === "subdomain" ? "." : ""}]`, "g");
            x.value = x.value.toLowerCase().replaceAll(' ', '-').replace(regex, '');
        });
    };
    if (sessionStorage.getItem("domain_create_key")) {
        const notice = document.createElement("div");
        notice.classList.add("domain-created");
        notice.innerHTML = `
            <div class="flex v-center gap-050">
                <h3 class="h5">Domain Key</h3>
                <button class="domain-created-close | push-right nostyles pointer" onclick="this.closest('.domain-created').remove()">
                    <i class="bx bx-x"></i>
                </button>
            </div>
            <p>Here is the Domain Key for <b>${sessionStorage.getItem("domain_create_name") ?? "domain"}</b>. Keep it somewhere safe as you won't be able to view it again</p>
            <div class="flex v-center gap-100">
                <p><code>${sessionStorage.getItem("domain_create_key")}</code></p>
                <button class="nostyles pointer" onclick="navigator.clipboard.writeText('${sessionStorage.getItem("domain_create_key")}')">
                    <i class="bx bx-copy"></i>
                </button>
            </div>
        `;
        document.querySelector("main")!.insertBefore(notice, document.querySelector("#domainContainer"));
        sessionStorage.removeItem("domain_create_key");
        sessionStorage.removeItem("domain_create_name");
    };

    const registerForm = document.querySelector("#domainRegisterForm") as HTMLFormElement;
    registerForm.addEventListener("submit", async e => {
        e.preventDefault();
        const button = registerForm.querySelector("button[type='submit']") as HTMLButtonElement;
        if (button.dataset.actionState === "loading") return;
        button.dataset.actionState = "loading";
        const error = registerForm.querySelector(".form-result") as HTMLParagraphElement;
        error.innerText = "";
        try {
            const name = document.querySelector("#domainRegisterName") as HTMLInputElement;
            const tld = document.querySelector("#domainRegisterTld") as HTMLSelectElement;
            const target = document.querySelector("#domainRegisterTarget") as HTMLInputElement;
            let invalid = false;
            if (!name.validity.valid) {
                invalid = true;
                name.classList.add("input-error");
            };
            if (!tld.validity.valid) {
                invalid = true;
                tld.classList.add("input-error");
            };
            if (!target.validity.valid) {
                invalid = true;
                target.classList.add("input-error");
            };
            if (!captcha_result_token) {
                if (window.turnstile.getResponse()) {
                    await captchaVerify(window.turnstile.getResponse())
                } else {
                    invalid = true;
                    document.querySelector(".cf-turnstile")!.classList.add("input-error");
                };
            };
            if (!invalid) {
                const request = await fetch(`/api/domains/${name.value}.${tld.value}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        target: target.value,
                        note: (document.querySelector("#domainRegisterNote") as HTMLInputElement).value,
                        searchable: (document.querySelector("#domainRegisterSearchable") as HTMLInputElement).checked,
                        captcha_token: captcha_result_token,
                    }),
                });
                if (request.status === 400) {
                    error.innerText = "Invalid domain name or TLD";
                } else if (request.status === 409) {
                    error.innerText = "Domain already exists";
                    name.classList.add("input-error");
                } else if (request.status === 200) {
                    error.innerText = "Domain registered";
                    error.style.color = "var(--wxp-clr-success-400)";
                    const data = await request.json();
                    sessionStorage.setItem("domain_selected_reload", data.data._id);
                    sessionStorage.setItem("domain_create_key", data.data.secret);
                    sessionStorage.setItem("domain_create_name", `${data.data.name}.${data.data.tld}`);
                    location.reload();
                } else {
                    const message = await request.json().catch(() => ({error: "Request failed"}));
                    error.innerText = `Failed to register domain (${request.status})\n${message.error ?? ""}`;
                };
                if (request.status !== 200) window.turnstile.reset();
            };
        } catch (e:any) {
            console.error(e);
            error.innerText = `Failed to register domain\n${e.message}`;
        };
        button.dataset.actionState = "save";
    });

    const recordCreateForm = document.querySelector("#recordCreateForm") as HTMLFormElement;
    recordCreateForm.addEventListener("submit", async e => {
        e.preventDefault();
        const button = recordCreateForm.querySelector("button[type='submit']") as HTMLButtonElement;
        if (button.dataset.actionState === "loading") return;
        button.dataset.actionState = "loading";
        const error = recordCreateForm.querySelector(".form-result") as HTMLParagraphElement;
        error.innerText = "";
        try {
            let record_create_domain:string = (document.querySelector("#recordCreateModal") as HTMLDialogElement).dataset.createRecordId!
            const name = document.querySelector("#recordCreateName") as HTMLInputElement;
            const target = document.querySelector("#recordCreateTarget") as HTMLInputElement;
            let invalid = false;
            if (!name.validity.valid) {
                invalid = true;
                name.classList.add("input-error");
            };
            if (!target.validity.valid) {
                invalid = true;
                target.classList.add("input-error");
            };
            if (!record_create_domain) {
                invalid = true;
                error.innerText = "No domain selected. Please reload and try again";
            }
            if (!invalid) {
                const request = await fetch(`/api/domains/${record_create_domain}/records/${name.value}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        target: target.value,
                        searchable: (document.querySelector("#recordCreateSearchable") as HTMLInputElement).checked,
                    }),
                });
                if (request.status === 400) {
                    error.innerText = "Missing or invalid parameters";
                    name.classList.add("input-error");
                    target.classList.add("input-error");
                } else if (request.status === 401) {
                    document.location = "/login";
                } else if (request.status === 404) {
                    location.reload();
                } else if (request.status === 409) {
                    error.innerText = "Subdomain already exists";
                    name.classList.add("input-error");
                } else if (request.status === 200) {
                    error.innerText = "Subdomain registered";
                    error.style.color = "var(--wxp-clr-success-400)";
                    sessionStorage.setItem("domain_selected_reload", record_create_domain);
                    location.reload();
                } else {
                    const message = await request.json().catch(() => ({error: "Request failed"}));
                    error.innerText = `Failed to add subdomain (${request.status})\n${message.error ?? ""}`;
                };
            };
        } catch (e:any) {
            console.error(e);
            error.innerText = `Failed to add subdomain\n${e.message}`;
        };
        button.dataset.actionState = "save";
    });

    document.querySelector("#domainSearch")?.addEventListener("input", filterDomains);
    (document.querySelectorAll("[name='domainSort']") as NodeListOf<HTMLInputElement>).forEach(x => x.addEventListener("change", () => {
        sortDomains(x.value);
    }));

    function sortDomains(order: string) {
        console.log("Sorting");
        let switchMade = true;
        while (switchMade) {
            switchMade = false;
            domains = document.querySelectorAll("[data-domain-id]") as NodeListOf<HTMLDivElement>;
            for (let i = 0; i < (domains.length - 1); i++) {
                console.log("a");
                const a = domains[i], b = domains[i + 1];
                if (
                    (order === "name" && b.dataset.domainName!.toLowerCase() < a.dataset.domainName!.toLowerCase()) ||
                    /* @ts-ignore */
                    (order === "created" && new Date(b.dataset.domainCreated!).getTime() > new Date(a.dataset.domainCreated!).getTime()) ||
                    /* @ts-ignore */
                    (order === "updated" && new Date(b.dataset.domainUpated!).getTime() > new Date(a.dataset.domainUpated!).getTime())
                ) {
                    container.insertBefore(b, a);
                    console.log("Swap made");
                    switchMade = true;
                    break;
                };
            };
        };
        document.cookie = `domain_sort=${order}; path=/; expires=${new Date(Date.now() + 1000 * 60 * 60 * 24 * 365).toUTCString()};`;
        const event = new CustomEvent("render_page");
        document.querySelector(".paged-controller")?.dispatchEvent(event);
    };
    function filterDomains() {
        const search_input = document.querySelector("#domainSearch") as HTMLInputElement;
        const search_term = search_input.value;
        domains.forEach(x => {
            let shouldShow = true;
            const domain_name = x.dataset.domainName!;
            if (search_term != "" && domain_name.toLowerCase().indexOf(search_term.toLowerCase()) == -1) shouldShow = false;
            x.style.display = shouldShow ? "" : "none";
            x.dataset.rowFiltered = shouldShow ? "" : "true";
        });
        const event = new CustomEvent("render_page", {
            detail: {
                page: 1
            }
        });
        document.querySelector(".paged-controller")?.dispatchEvent(event);
    };

    // const domainSearch = document.querySelector("#domainSearch") as HTMLInputElement;
    // domainSearch.addEventListener("input", () => renderPage());

    // const domainSortInputs = document.querySelectorAll("[name='domainSort']");
    // for (let x of domainSortInputs) x.addEventListener("change", () => renderPage());


    // try {
    //     const request = await fetch("/api/domains/?owned=true", {
    //         method: "GET",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     });
    //     if (request.status == 401) document.location = "/login";
    //     if (request.status != 200) {
    //         container.innerHTML = `<p class="domain-error | text-center">Error loading domains (${request.status})</p>`;
    //     } else {
    //         const result = await request.json() as {data: types.Domain[]};
    //         domains = result.data;
    
    //         (document.querySelector("#domainPageCount") as HTMLParagraphElement).innerText = result.data.length.toString();
            
    //         if (sessionStorage.getItem("domain_selected_reload")) {
    //             const sorted = generatePage();
    //             const index = sorted.findIndex(x => x._id === sessionStorage.getItem("domain_selected_reload"));
    //             if (index > -1) {
    //                 const page = Math.floor(index / domains_per_page);
    //                 current_page = page;
    //                 renderPage();
    
    //                 const domain = document.querySelector(`[data-domain-id="${sessionStorage.getItem("domain_selected_reload")}"]`);
    //                 if (domain) domain.setAttribute("aria-expanded", "true");
    //                 sessionStorage.removeItem("domain_selected_reload");
    //             } else {
    //                 renderPage();
    //             };
    //         } else {
    //             renderPage();
    //         };
    //     };
    // } catch (e:any) {
    //     console.error(e);
    //     container.innerHTML = `<p class="domain-error | text-center">Error loading domains<br>${e.message}</p>`;
    // };

    // function mapDomain(x:types.Domain, i:number) {
    //     return `<div class="domain-card" data-domain-id="${x._id}" data-domain-name="${x.name}.${x.tld}" aria-expanded="false" ${i >= domains_per_page ? `style="display: none"` : ""}>
    //         <div class="domain-header | flex v-center">
    //             <div class="domain-expand">
    //                 <button class="domain-expand-button | nostyles" data-domain-expand="${x._id}">
    //                     <i class="bx bx-chevron-right"></i>
    //                 </button>
    //             </div>
    //             <div class="domain-details">
    //                 <h3 class="h3">${x.name}<span class="domain-tld">.${x.tld}</span></h3>
    //                 <div class="flex v-center gap-050">
    //                     <p class="domain-note" data-domain-field="note">${x.note ?? ""}</p>
    //                     <button class="domain-edit-button | nostyles pointer" data-domain-edit="note" data-action-state="edit">
    //                         <i class="bx bx-pencil"></i>
    //                     </button>
    //                 </div>
    //             </div>
    //         </div>
    //         <div class="domain-body">
    //             <p class="domain-heading">Target</p>
    //             <div class="flex v-center gap-050">
    //                 <p class="domain-target" data-domain-field="target">${x.target}</p>
    //                 <button class="domain-edit-button | nostyles pointer" data-domain-edit="target" data-action-state="edit">
    //                     <i class="bx bx-pencil"></i>
    //                 </button>
    //             </div>
    //             <p class="domain-heading">Searchable</p>
    //             <div class="flex v-center gap-100">
    //                 <label class="toggle">
    //                     <input type="checkbox" data-domain-field="searchable" id="domain_${x._id}_searchable" ${x.searchable ? "checked" : ""}>
    //                     <span aria-hidden="true"></span>
    //                 </label>
    //                 <label for="domain_${x._id}_searchable" class="toggle-label | flex v-center gap-050">
    //                     <p>Searchable</p>
    //                     <p class="domain-edit-button" data-action-state="edit" data-domain-status="searchable">
    //                         <i class="bx bx-pencil"></i>
    //                     </p>
    //                 </label>
    //             </div>
    //             <p class="input-note">Disable to hide your website from searches and bulk domain listing. Your domain will still be accessible via the the URL</p>
    //             <div class="flex v-center gap-100">
    //                 <p class="domain-heading">Subdomains</p>
    //                 <button class="domain-create | push-right nostyles pointer" data-domain-action="record_create">
    //                     <span>Add Subdomain</span>
    //                 </button>
    //             </div>
    //             <table>
    //                 <thead class="sr-only">
    //                     <tr>
    //                         <th>Name</th>
    //                         <th>Target</th>
    //                         <th>Searchable</th>
    //                         <th>Actions</th>
    //                     </tr>
    //                 </thead>
    //                 <tbody>${x.records.map(y => `<tr data-record-id="${y._id}" data-record-name="${y.name}" data-record-full="${y.name}.${x.name}.${x.tld}">
    //                         <td>
    //                         <span class="record-name">${y.name}</span>
    //                         <span class="record-domain">.${x.name}.${x.tld}</span>
    //                     </td>
    //                     <td>
    //                         <div class="flex v-center gap-050">
    //                             <p class="domain-target" data-record-field="target">${y.target}</p>
    //                             <button class="domain-edit-button | nostyles pointer" data-record-edit="target" data-action-state="edit">
    //                                 <i class="bx bx-pencil"></i>
    //                             </button>
    //                         </div>
    //                     </td>
    //                     <td>
    //                         <div class="flex v-center gap-100">
    //                             <label class="toggle">
    //                                 <input type="checkbox" data-record-field="searchable" id="domain_${x._id}_record_${y._id}_searchable" ${y.searchable ? "checked" : ""}>
    //                                 <span aria-hidden="true"></span>
    //                             </label>
    //                             <label for="domain_${x._id}_record_${y._id}_searchable" class="toggle-label | flex v-center gap-050">
    //                                 <p>Searchable</p>
    //                                 <p class="domain-edit-button" data-action-state="edit" data-record-status="searchable">
    //                                     <i class="bx bx-pencil"></i>
    //                                 </p>
    //                             </label>
    //                         </div>
    //                     </td>
    //                     <td>
    //                         <button class="domain-edit-button | nostyles pointer" data-domain-action="record_delete">
    //                             <i class="bx bx-trash"></i>
    //                         </button>
    //                     </td>
    //                 </tr>`).join("")}</tbody>
    //             </table>
    //         </div>
    //     </div>`;
    // };

    // function sortDomains(domains2?: types.Domain[]) {
    //     if (!domains2) domains2 = domains;
    //     let sort_by = document.querySelector("[name='domainSort']:checked") as HTMLInputElement;
    //     if (!sort_by) {
    //         sort_by = document.querySelector("[name='domainSort'][value='name']") as HTMLInputElement;
    //         sort_by.checked = true;
    //     };
    //     if (sort_by.value === "name") {
    //         /* @ts-ignore */
    //         return domains.sort((a, b) => a.name.localeCompare(b.name));
    //     } else if (sort_by.value === "tld") {
    //         /* @ts-ignore */
    //         return domains.sort((a, b) => a.tld.localeCompare(b.tld));
    //     } else if (sort_by.value === "created") {
    //         return domains.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
    //     } else if (sort_by.value === "updated") {
    //         return domains.sort((a, b) => new Date(a.updated_at).getTime() - new Date(b.updated_at).getTime());
    //     };
    //     return domains;
    // };
    // function searchDomains() {
    //     const search = document.querySelector("#domainSearch") as HTMLInputElement;
    //     if (!search) return domains;
    //     return domains.filter(x => x.name.toLowerCase().includes(search.value.toLowerCase()) || x.tld.toLowerCase().includes(search.value.toLowerCase()));
    // }
    // function generatePage() {
    //     const domainSearch = document.querySelector("#domainSearch") as HTMLInputElement;
    //     const term = domainSearch.value.toLowerCase();
    //     const search_results = domains.filter(x => x.name.toLowerCase().includes(term) || x.tld.toLowerCase().includes(term) || (x.note && x.note.toLowerCase().includes(term)));
    //     const sorted = sortDomains(search_results);
    //     return sorted;
    // };
    // function renderPage() {
    //     const container = document.querySelector("#domainList") as HTMLDivElement;
    //     const generatedDomains = generatePage();
    //     if (generatedDomains.length === 0) {
    //         container.innerHTML = `<p class="domain-error | text-center">No domains found</p>`;
    //         return;
    //     };
    //     container.innerHTML = generatedDomains.slice(current_page * domains_per_page, (current_page + 1) * domains_per_page).map(mapDomain).join("");
    //     addDomainListeners();
    //     (document.querySelector("#domainPageStart") as HTMLParagraphElement).innerText = `${current_page * domains_per_page + 1}`;
    //     (document.querySelector("#domainPageEnd") as HTMLParagraphElement).innerText = `${Math.min(generatedDomains.length, (current_page + 1) * domains_per_page)}`;
    //     const pageCount = Math.ceil(generatedDomains.length / domains_per_page);
    //     const pageControls = document.querySelector(".domain-page-controls") as HTMLDivElement;
    //     Array.from(pageControls.children as HTMLCollectionOf<HTMLParagraphElement>).forEach(x => {
    //         if (!isNaN(parseInt(x.dataset.page!))) pageControls.removeChild(x);
    //     });
    //     for (let x = 0; x < Math.max(pageCount, 1); x++) {
    //         const pageButton = document.createElement("button") as HTMLButtonElement;
    //         pageButton.classList.add("domain-page-control");
    //         pageButton.classList.add("nostyles");
    //         pageButton.classList.add("pointer");
    //         pageButton.setAttribute("data-page", `${x}`);
    //         if (x === current_page) pageButton.setAttribute("data-page-current", "true");
    //         pageButton.innerText = `${x + 1}`;
    //         pageControls.insertBefore(pageButton, pageControls.querySelector(".domain-page-control[data-page='next']"));
    //     };
    // };
</script>

<style>
    .domain-create {
        font-weight: 800;
        color: var(--wxp-clr-primary-600);
    }

    #domainRegisterTld {
        min-width: 150px;
    }

    .domain-created {
        background: var(--wxp-clr-danger-800);
        border: 1px solid var(--wxp-clr-dark-300);
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
    }
    .domain-created-close {
        display: grid;
        place-items: center;
        font-size: 30px;
    }
    .domain-created b {
        color: var(--wxp-clr-text-200);
    }

    #domainSearch {
        max-width: 500px;
    }

</style>