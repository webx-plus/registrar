---

import * as types from "../../types";

export type Props = {
    rows_per_page: number;
    total_rows: number;
}

const { rows_per_page, total_rows } = Astro.props;

const pages = Math.ceil(total_rows / rows_per_page);

---

<div class="paged-controller | flex v-center gap-200" data-rows-per-page={rows_per_page}>
    <div class="page-buttons | flex">
        <button class="nostyles" disabled data-page="first" aria-label="first page"><i class="bx bx-first-page" aria-hidden="true"></i></button>
        <button class="nostyles" disabled data-page="prev" aria-label="previous page"><i class="bx bx-chevron-left" aria-hidden="true"></i></button>
        {new Array(pages).fill(1).map((x, i) => 
            <button class="nostyles" data-page-active={i == 0} data-page={i+1} aria-label={"goto page number " + (i+1)}>{i+1}</button>
        )}
        <button class="nostyles" disabled={pages <= 1} data-page="next" aria-label="next page"><i class="bx bx-chevron-right" aria-hidden="true"></i></button>
        <button class="nostyles" disabled={pages <= 1} data-page="last" aria-label="last page"><i class="bx bx-last-page" aria-hidden="true"></i></button>
    </div>
    <p class="result-count">Showing 1 - {Math.min(rows_per_page, total_rows)} of {total_rows} rows</p>
</div>

<script>
    const rows_per_page = parseInt((document.querySelector(".paged-controller") as HTMLDivElement)?.dataset?.rowsPerPage ?? "50");
    let current_page = 1;
    let max_pages = Math.ceil(document.querySelectorAll(`[data-domain-id]:not([data-row-filtered="true"])`).length / rows_per_page);

    (document.querySelectorAll(".page-buttons button") as NodeListOf<HTMLButtonElement>).forEach(x => {
        x.addEventListener("click", () => {
            if (x.dataset.page == "first") return showPage(1);
            if (x.dataset.page == "prev") return showPage(current_page - 1);
            if (x.dataset.page == "next") return showPage(current_page + 1);
            if (x.dataset.page == "last") return showPage(max_pages);
            showPage(parseInt(x.dataset.page as string));
        });
    });

    function showPage(page_no:number) {
        const rows = Array.from(document.querySelectorAll(`[data-domain-id]:not([data-row-filtered='true'])`)) as HTMLDivElement[];
        const pages = [];
        for (let i = 0; i < rows.length; i += rows_per_page) {
            pages.push(rows.slice(i, i+rows_per_page));
        };
        console.log(pages);
        max_pages = pages.length;
        rows.forEach(x => x.style.display = "none");
        current_page = Math.min(page_no, max_pages);
        pages[current_page - 1].forEach(x => x.style.display = "");
        const shown_rows = (current_page - 1) * rows_per_page;
        (document.querySelector(`.paged-controller .result-count`) as HTMLParagraphElement).innerHTML = `Showing ${shown_rows + 1} - ${Math.min(shown_rows + rows_per_page, rows.length)} of ${rows.length} rows`;
        (document.querySelector(".page-buttons [data-page='next']") as HTMLButtonElement).disabled = current_page >= max_pages;
        (document.querySelector(".page-buttons [data-page='last']") as HTMLButtonElement).disabled = current_page >= max_pages;
        (document.querySelector(".page-buttons [data-page='first']") as HTMLButtonElement).disabled = current_page <= 1;
        (document.querySelector(".page-buttons [data-page='prev']") as HTMLButtonElement).disabled = current_page <= 1;

        const page_buttons = document.querySelectorAll(".page-buttons button") as NodeListOf<HTMLButtonElement>;
        page_buttons.forEach(x => {
            const page = parseInt(x.dataset.page ?? "0");
            x.style.display = page > max_pages ? "none" : "";
            x.removeAttribute("data-page-active");
            if (page === current_page) x.dataset.pageActive = "true";
        });
    };

    document.querySelector(".paged-controller")?.addEventListener("render_page", e => {
        /* @ts-ignore */
        showPage(e.detail?.page ?? current_page);
    })
</script>

<style>
    .paged-controller {
        margin-top: 20px;
    }

    .page-buttons {
        border: 1px solid var(--wxp-clr-dark-900);
        border-radius: 5px;
        overflow: hidden;
    }
    .page-buttons button {
        display: grid;
        place-items: center;
        aspect-ratio: 1 / 1;
        width: 30px;
        cursor: pointer;
    }
    .page-buttons button:not(:disabled):is(:hover, :focus-visible) {
        background: var(--wxp-clr-dark-800);
    }
    .page-buttons button:not(:disabled)[data-page-active="true"] {
        background: var(--wxp-clr-dark-900);
    }
    .page-buttons button:disabled {
        color: var(--wxp-clr-text-600);
        cursor: not-allowed;
    }
    .page-buttons button:not(:last-child) {
        border-right: 1px solid var(--wxp-clr-dark-900);
    }
</style>